# Доставка на сервер

name: cd-streamer

on:
  pull_request:
    branches: [ "main" ]

  # позволяет ручной запуск
  workflow_dispatch:
env:
  REPO: ${{ github.event.repository.full_name }}
  BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login into dockerhub
        run:  echo "${{ secrets.DOCKER_TOKEN }}" | docker login "${{ vars.DOCKER_PATH }}" -u "${{ vars.DOCKER_USER }}" --password-stdin
      - name: Build Image
        run: docker build . -t ${{ vars.DOCKER_REGISTRY }}:${{ vars.DOCKER_TAG }} --no-cache
      - name: Publish Image
        run: docker push ${{ vars.DOCKER_REGISTRY }}:${{ vars.DOCKER_TAG }}
  deploy:
    name: Deploy on stage
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ needs.build.result == 'success'}}
    steps:
      - name: Install sshkeys
        run: |
          mkdir -p ~/.ssh/
          touch ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa 
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa 
          ssh-keyscan -H ${{ vars.SSH_HOST }} > ~/.ssh/known_hosts  
      - name: Check ssh
        run:
          ssh-keygen -l -f ~/.ssh/id_rsa
      - name: Deploy
        run: |
          ssh -i ~/.ssh/id_rsa ${{ vars.SSH_USER}}@${{ vars.SSH_HOST }} 'cd ${{ vars.WORKDIR }} && mkdir -p streamer &&
          cd streamer && 
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login "${{ vars.DOCKER_PATH }}" -u "${{ vars.DOCKER_USER }}" --password-stdin && 
          rm -f docker-compose.yml && 
          curl https://raw.githubusercontent.com/${{ env.REPO }}/refs/heads/${{ env.BRANCH }}/docker-compose.yml > docker-compose.yml && 
          docker-compose -f docker-compose.yml up  -d --no-deps --build --force-recreate'
      - name: Clear ssh on runner
        run: rm -r ~/.ssh